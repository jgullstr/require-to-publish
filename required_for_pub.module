<?php

/**
 * @file
 * Required for Publishing module.
 */

/**
 * Required state constants for fields.
 */
define('REQUIRED_FOR_PUB_NOT_REQUIRED', 0);
define('REQUIRED_FOR_PUB_REQUIRED', 1);
define('REQUIRED_FOR_PUB_REQUIRED_FOR_PUB', 2);

/**
 * Submit button values.
 */
define('REQUIRED_FOR_PUB_DRAFT_TRIGGER', 'required_for_pub_draft');
define('REQUIRED_FOR_PUB_PUBLISH_TRIGGER', 'required_for_pub_publish');

/**
 * Implements hook_help().
 */
function required_for_pub_help($path, $arg) {
  switch ($path) {
    case 'admin/help#required_for_pub':
      return t('Allows forms to be filled without required fields before publishing.');
  }
}

/**
 * Implements hook_permission().
 */
function required_for_pub_permission() {
  return array(
    'required_for_pub_save_draft' => array(
      'title' => t('Save content as draft'),
      'description' => t('Allows a user to save content as draft.'),
    ),
  );
}

/**
 * Implements hook_field_info_alter().
 */
function required_for_pub_field_info_alter(&$info) {
  // Add the required_for_pub setting to all field types. Defaults
  // to NULL in order to preserve earlier "Required field" setting.
  foreach (array_keys($info) as $field_type) {
    $info[$field_type]['instance_settings']['required_for_pub'] = NULL;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function required_for_pub_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Hide the "Required field" checkbox. This functionality becomes
  // part of the required_for_pub field.
  $form['instance']['required']['#access'] = FALSE;

  // "Required for publishing" form element. Default value is taken
  // from the "Required field" setting if not set.
  $form['instance']['required_for_pub'] = array(
    '#type' => 'radios',
    '#title' => t('Required for publishing'),
    '#description' => t('"Required for publishing" allows the form to be saved in unpublished state without entering the required fields.'),
    '#default_value' => !isset($form['#instance']['required_for_pub']) ? (int) $form['#instance']['required'] : $form['#instance']['required_for_pub'],
    '#weight' => -9,
    '#options' => array(
      REQUIRED_FOR_PUB_NOT_REQUIRED => t('Not Required'),
      REQUIRED_FOR_PUB_REQUIRED => t('Required field'),
      REQUIRED_FOR_PUB_REQUIRED_FOR_PUB => t('Required for publishing'),
    ),
  );

  // Add custom validation handler.
  $form['#validate'][] = 'required_for_pub_validate_required_field_setting';
}

/**
 * Validation callback for field_ui_field_edit_form.
 */
function required_for_pub_validate_required_field_setting($form, &$form_state) {
  // Get selected "Required for publishing" state.
  $required_state = $form_state['values']['instance']['required_for_pub'];

  // Set appropriate value for the (now hidden) "Required field" option.
  $form_state['values']['instance']['required'] = ($required_state == REQUIRED_FOR_PUB_REQUIRED);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function required_for_pub_field_widget_form_alter(&$element, &$form_state, $context) {
  $instance = $context['instance'];
  $required_for_pub = isset($instance['required_for_pub']) ? $instance['required_for_pub'] : FALSE;
  
  if ($required_for_pub == REQUIRED_FOR_PUB_REQUIRED_FOR_PUB) {
    // Field elements, where the field info is not available directly
    // from the root element, currently need to be mapped manually.
    // @see required_for_pub_field_widget_form_element_parents()
    if (empty($element['#field_name'])) {
      if ($parents = required_for_pub_field_widget_form_element_parents($context)) {
        $real_element = &drupal_array_get_nested_value($element, $parents);
        return required_for_pub_field_widget_form_alter($real_element, $form_state, $context);
      }
      drupal_set_message(t('Field type @field_type is not supported by the Require to publish module.', array('@field_type' => $context['field']['type'])), 'warning');
      return;
    }

    if (user_access('required_for_pub_save_draft')) {
      // Append required on publishing markup to field label.
      if (!empty($element['#title'])) {
        $label = $element['#title'];
        $element['#original_title'] = $element['#title'];
        $element['#title'] .= theme('required_for_pub_marker',  array('element' => $element));
      }

      // Add an element_validate callback to handle fields required on publishing.
      $element += array('#element_validate' => array());
      array_unshift($element['#element_validate'], 'required_for_pub_field_widget_element_validate');
    }
    else {
      // Require field if user has no access.
      $element['#required'] = TRUE;
    }
  }
}

/**
 * Map from field types with widget form elements outside of the element root.
 *
 * @param array $context
 *   An associative array containing the following key-value pairs, matching the
 *   arguments received by hook_field_widget_form():
 *   - form: The form structure to which widgets are being attached. This may be
 *     a full form structure, or a sub-element of a larger form.
 *   - field: The field structure.
 *   - instance: The field instance structure.
 *   - langcode: The language associated with $items.
 *   - items: Array of default values for this field.
 *   - delta: The order of this item in the array of subelements (0, 1, 2, etc).
 */
function required_for_pub_field_widget_form_element_parents($context) {
  $field_type_parents = array(
    'entityreference' => array('target_id'),
    'number_decimal' => array('value'),
    'number_float' => array('value'),
    'number_integer' => array('value'),
  );
  $field_type = $context['field']['type'];
  $widget_type = $context['instance']['widget']['type'];

  $parents = isset($field_type_parents[$field_type]) ? $field_type_parents[$context['field']['type']] : FALSE;

  // Alter hooks for unsupported fields / widgets.
  $hooks = array(
    'required_for_pub_element_parents',
    'required_for_pub_element_' . $field_type . '_parents',
    'required_for_pub_element_' . $field_type . '_' . $widget_type . '_parents',
  );
  drupal_alter($hooks, $parents, $context);
  return $parents;
}

/**
 * Element validate callback for "Required for publishing" fields.
 */
function required_for_pub_field_widget_element_validate(&$element, &$form_state) {
  // Is field base field? Returns false for summary fields and likes.
  $is_base_field = !(isset($element['#base_type'], $element['#type']) && $element['#base_type'] != $element['#type']);

  // If form is in validation limbo.
  if ($is_base_field && $form_state['process_input'] && ($form_state['triggering_element']['#name'] == REQUIRED_FOR_PUB_PUBLISH_TRIGGER)) {
    // Get field items from form input.
    $form_base = &drupal_array_get_nested_value($form_state['values'], $element['#field_parents']);
    $field_items = $form_base[$element['#field_name']][$element['#language']];
    $item = reset($field_items);

    // Check if field is empty.
    $field = field_widget_field($element, $form_state);
    $function = $field['module'] . '_field_is_empty';
    if (empty($item) || $function($item, $field)) {
      $instance = field_widget_instance($element, $form_state);
      $label = !empty($element['#original_title']) ? $element['#original_title'] : $instance['label'];

      if (!empty($label)) {
        form_error($element, t('@label is required before publishing.', array('@label' => $label)));
      }
      else {
        form_error($element);
      }
    }
  }
  return $element;
}

/**
 * Implements hook_field_attach_form().
 */
function required_for_pub_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // Only invoke module for node entities and users with permission to save drafts.
  if ($entity_type != 'node' || !user_access('required_for_pub_save_draft')) {
    return;
  }

  // Add a "Save as draft" action to the form.
  $form['actions']['required_for_pub_save_as_draft'] = array(
    '#type' => 'submit',
    '#access' => TRUE,
    '#value' => t('Save as draft'),
    '#name' => REQUIRED_FOR_PUB_DRAFT_TRIGGER,
    '#weight' => 4,
    '#submit' => array('node_form_submit'),
  );

  // Change save button text to "Publish", add value for validation
  // condition.
  $form['actions']['submit']['#value'] = t('Publish');
  $form['actions']['submit']['#name'] = REQUIRED_FOR_PUB_PUBLISH_TRIGGER;

  // Add validation callback.
  $form['#validate'][] = 'required_for_pub_form_validate';
}

/**
 * Custom validation for the entity add or edit forms
 */
function required_for_pub_form_validate($form, &$form_state) {
  $trigger = $form_state['triggering_element']['#name'];

  // Enforce published state depending on triggering button.
  switch ($trigger) {
    case REQUIRED_FOR_PUB_DRAFT_TRIGGER:
      $form_state['values']['status'] = FALSE;
      break;

    case REQUIRED_FOR_PUB_PUBLISH_TRIGGER:
      $form_state['values']['status'] = TRUE;
      break;
  }
}

/**
 * Implements hook_theme().
 */
function required_for_pub_theme() {
  return array(
    'required_for_pub_marker' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Returns HTML appended to field labels for required_for_pub elements.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *
 */
function theme_required_for_pub_marker($variables) {
  $attributes = array(
    'class' => 'form-required form-required-for-pub',
    'title' => t('This field is required for publishing.'),
  );
  return '<span' . drupal_attributes($attributes) . '>**</span>';
}
